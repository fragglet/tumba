.TH tumba_smbd 8
.SH NAME
tumba_smbd \- SMBv1 file server
.SH SYNOPSIS
.B tumba_smbd
.RB [options]
.I path [path...]
.SH DESCRIPTION
.PP
.B Tumba
(tumba_smbd) is a file server that implements version 1 (and only version 1) of
the Server Message Block (SMB) protocol, the native file sharing protocol used
by the Microsoft Windows operating systems. Version 1 of the protocol was
commonly used in the 1990s by the \fIWindows for Workgroups\fR, \fIWindows
9x\fR and \fIWindows NT\fR operating systems of the day.
.PP
.SH COMMAND SYNTAX
The server must be supplied the path(s) to one or more directories to share to
network users. The base directory name (ala \fBbasename\fR(3)) is used as the
share name. For example, if \fB/var/tumba/pineapples\fR is given, network users
will be able to access it via the share named \fBPINEAPPLES\fR.
.PP
All shares are public and there is no option for password-protected shares. If
the \fBo+w\fR permission is set on the directory, it will be a read/write
share; otherwise, it will be read-only. See \fBPRIVILEGES\fR below for more
information.
.PP
.SH OPTIONS
The following command line options are understood:
.TP
\fB-a\fR
Allow connections from all (public) IP addresses. By default the server
immediately closes any incoming connections not from localhost (127.0.0.1) or
RFC 1918 private ranges (192.168.0.0/16; 10.0.0.0/8; 172.16.0.0/20). Since
\fBTumba\fR does not support any password protection for shares, you should
make sure you are very certain that you understand the implications of this
argument before using it.
.TP
\fB-b addr\fR
Bind to given IP address. By default the server binds to \fB0.0.0.0\fR,
allowing incoming connections from any network interface, but this argument can
be used to bind only to a specific interface.
.TP
\fB-p port\fR
Listen on the given TCP port. By default, \fBTumba\fR listens on port 139, the
NetBIOS session service port.
.TP
\fB-d level\fR
Change the logging level. Values here are: 0 (error); 1 (warning); 2 (notice);
3 (info); 4 (debugging messages). By default errors and warnings are logged.
.TP
\fB-l logfile\fR
Specify path to a log file to write log messages.
.PP
.SH EXAMPLES
Here are some examples for how to invoke the program:
.TP
tumba_smbd /var/tumba/*
Export all subdirectories of \fB/var/tumba\fR as shares.
.TP
tumba_smbd -b 127.0.0.1 -p 9999 /tmp/myshare
Listen only on the localhost interface, on the nonstandard TCP port 9999.
.TP
tumba_smbd -d 10 -l /tmp/tumba.log /tmp/debugshare
Run the server with verbose logging, writing to the file \fB/tmp/tumba.log\fR.
.PP
Managing shares:
.TP
chmod o+w /var/tumba/docs
Change the DOCS share to a read-write share.
.TP
chmod o-w /var/tumba/docs
Change the DOCS share to a read-only share.
.TP
chmod o-x /var/tumba/docs
Disable access to the DOCS share entirely.
.SH SMBCLIENT COMPATIBILITY
The \fBsmbclient\fR(1) command-line client that ships with \fBsamba\fR(7) can
be used to connect used to connect to SMB servers including Tumba. However,
recent versions of Samba will not use the SMB1 protocol unless explicitly
configured. If you try to connect, you'll see an error that looks like this:
.IP
.EX
$ smbclient -L example
Protocol negotiation to server example (for a protocol between SMB2_02 and
SMB3) failed: NT_STATUS_CONNECTION_DISCONNECTED
.EE
.PP
To enable SMBv1 support, you will need to override the "client min protocol"
option. For example, to list shares:
.IP
smbclient --option="client min protocol=NT1" -L localhost
.PP
The override can be made permanent by editing \fBsmb.conf\fR(5). For example:
.IP
.EX
[global]
client min protocol = NT1
.EE
.PP
Note that since the Samba project is in the process of removing SMB1 support,
there's a good chance that this workaround might stop working in the future.
.SH PRIVILEGES
\fBTumba\fR is intended to be run as an unprivileged user, \fInot\fR as root.
If run as root, it will use the \fBsetuid\fR(2) system call to change itself to
the \fBnobody\fR user. This allows the server to bind to the (privileged) TCP
port 139 on startup before dropping privileges. However, Tumba also ships with
a \fBsystemd\fR(1) service configuration file that will grant it permission to
that port without ever needing to run as root.
.PP
The \fBo+w\fR permission on a shared directory controls whether that share will
be read-only or not However, because the server runs as an unprivileged user,
the files it accesses must also have their individual permissions set to
world-readable (and world-writable for non-readonly shares). Since the files
will be world-accessible via the network anyway, this is not a security issue.
.SH LIMITATIONS
\fBTumba\fR is an intentionally minimalist implementation of the SMB protocol,
and does not implement many of the features of the SMBv1 protocol. The
following is a nonexhaustive list:
.IP \(bu
\fBPassword protected shares\fR. All shares are world-readable and there is no
way to use the password protection functionality of the protocol. This is a
deliberate design decision to avoid giving the false sense of security that
passwords would imply; the cryptography used in the protocol is long obsolete
and untrustworthy. If the contents of the directories you are sharing are
sensitive enough to need password protection, you should find other ways to
protect them. One example might be to use a VPN; another option you should
consider is to use a different protocol.
.IP \(bu
\fBPer-user home directory shares\fR. This is a feature found in \fBsmbd\fR(1)
that allows users to access their Unix home directories. \fBTumba\fR only ever
shares a static list of directories.
.IP \(bu
\fBPrinter sharing\fR. The project only aims to be a file server.
.IP \(bu
\fBUnicode / code page support\fR. While 7-bit ASCII characters are treated in a
case-insensitive fashion, no attempt is made to interpret higher range
characters. So for example, while \fBcliche.txt\fR and \fBCLICHE.TXT\fR will
both be interpreted as references to the same file, \fBcliché.txt\fR and
\fBCLICHÉ.TXT\fR will not.
.SH DOS ATTRIBUTES
The DOS read-only attribute is mapped to the Unix write attribute; network
users will see the +R attribute set if (1) the file is not world writable
(o-w); and (2) the file is owned by a different user to the one that the server
is running as, or the file is not owner-writable (u-w).
.PP
The other DOS file attributes (archive; system; hidden) are preserved through
the use of filesystem extended attributes (xattrs). The same
\fBuser.DOSATTRIB\fR attribute is used that is also supported by Samba,
although only the original version is understood. Some other free software
projects such as \fBdosemu2\fR and \fBdosbox-staging\fR also support the same
attribute.
.PP
There is not yet any support for reading and writing the real attributes from
files on FAT or NTFS volumes, even though the system APIs for doing this exist
on Linux (\fBdosattr\fR(1)) and FreeBSD (\fBchflags\fR(1)).
.SH BUG REPORTS
Bugs can be reported to the GitHub issue tracker:
.UR https://github.com/fragglet/tumba
https://github.com/fragglet/tumba
.UE
.SH SEE ALSO
\fBsamba\fR(7),
\fBsmbd\fR(8),
\fBnmbd\fR(8),
\fBsmbclient\fR(1)
.SH HISTORY
The SMB protocol was created in the 1980s at IBM, but popularized by Microsoft
through its LAN Manager and Windows products. Specifically, its \fIWindows for
Workgroups\fR (1992) product integrated networking support into Windows with
SMB as its native file sharing protocol. Initially operating on top of NetBIOS
frames (NBF) and Novell's IPX protocols, the introduction of NetBIOS over
TCP/IP (NBT; RFCs 1001/1002) brought SMB to the IP world.
.PP
Around 1991-1992, Andrew Tridgell released the first versions of \fISamba\fR,
a free software implementation of SMB for Unix systems. The project has
continued to evolve and develop in the decades since then, keeping pace with
the protocol itself which has continued to evolve. Nowadays, most users use
version 2 of the SMB protocol.
.PP
At the time of writing in 2025, the SMBv1 protocol is now considered obsolete,
and Samba along with other vendors including Microsoft and Apple have either
dropped or are in the process of dropping support for it entirely. In late
2024, Simon Howard created \fITumba\fR as a fork of Samba v1.9.18p10
(originally released 2007). The original code was pared down to the basics
with most of Samba's more elaborate features deleted, the result being a
much smaller codebase with less than 14,000 lines of code.
.SH AUTHOR
Tumba originated as a fork of Samba by Andrew Tridgell. It is developed and
maintained by
.MT fraggle@gmail.com
Simon Howard
.ME .
.SH COPYRIGHT
Copyright (C) Andrew Tridgell 1992-1998
.br
Copyright (C) Simon Howard 2024-2025

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.
